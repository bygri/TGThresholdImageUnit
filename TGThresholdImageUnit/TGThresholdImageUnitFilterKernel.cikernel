//  Copyright (c) 2011 Toby Griffin

//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:

//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.

//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

kernel vec4 threshold(sampler image, float threshold)
{
	int r, g, b;
	bool cutoff;
	vec4 pixel = unpremultiply(sample(image, samplerCoord(image)));
	
	// Cut off near-white, and scale all others
	r = pixel.r > threshold ? 1 : 0;
	g = pixel.g > threshold ? 1 : 0;
	b = pixel.b > threshold ? 1 : 0;
	cutoff = (r + g + b) == 3;
	
	// ok... so extra scale should range from 1.0 (when white) to 1.1 (when black)
	pixel.r = cutoff ? 1.0 : pixel.r / (threshold * (1.0 + pixel.r * 0.1));
	pixel.g = cutoff ? 1.0 : pixel.g / (threshold * (1.0 + pixel.g * 0.1));
	pixel.b = cutoff ? 1.0 : pixel.b / (threshold * (1.0 + pixel.b * 0.1));
	
	return premultiply(pixel);
}
